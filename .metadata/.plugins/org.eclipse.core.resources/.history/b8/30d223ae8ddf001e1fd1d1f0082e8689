package com.blog.serviceImpl;

import java.awt.print.Pageable;

import java.util.Date;
import java.util.List;
import java.util.stream.Collectors;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.stereotype.Service;

import com.blog.entity.Category;
import com.blog.entity.Post;
import com.blog.entity.User;
import com.blog.exceptions.ResourceNotFoundException;
import com.blog.payload.ApiResponse;
import com.blog.payloads.PostDto;
import com.blog.payloads.PostResponse;
import com.blog.repository.CategoryRepo;
import com.blog.repository.PostRepo;
import com.blog.repository.UserRepo;
import com.blog.service.PostService;


@Service
public class PostServiceImpl implements PostService{
	
	@Autowired
	private PostRepo postRepo;
	
	@Autowired
	private UserRepo userRepo;
	
	@Autowired
	private CategoryRepo categoryRepo;
	
	@Autowired
	private ModelMapper modelMapper;


	@Override
	public PostDto createPost(PostDto postDto, Integer userId, Integer categoryId) {
		
	Category category = this.categoryRepo.findById(categoryId).orElseThrow(()-> new 
				ResourceNotFoundException("Category", "category id", categoryId));
		
	User user = this.userRepo.findById(userId).orElseThrow(()-> new 
				ResourceNotFoundException("User", " user id", userId));
		
    Post post = this.modelMapper.map(postDto, Post.class);  
      post.setImageName("default.png");
      post.setAddedDate(new Date());
      post.setUser(user);
      post.setCategory(category);
      
      Post newPost = this.postRepo.save(post);
      
	  return this.modelMapper.map(newPost, PostDto.class);

	}


	@Override
	public PostDto getPost(Integer postId) {
		
		Post post = this.postRepo.findById(postId).orElseThrow(()-> new ResourceNotFoundException("Post", "post id", postId));
		
		return this.modelMapper.map(post, PostDto.class);
	}


	@Override
	public PostDto updatePost(PostDto postDto, Integer postId) {
		Post post = this.postRepo.findById(postId).orElseThrow(()-> new ResourceNotFoundException("Post", "post id", postId));
		
		post.setTitle(postDto.getTitle());
		post.setContent(postDto.getContent());
		post.setImageName(postDto.getImageName());
		
		Post updatePost = this.postRepo.save(post);
		return this.modelMapper.map(updatePost, PostDto.class);
		
	}


	@Override
	public ApiResponse deletePost(Integer postId) {
		
	Post post = this.postRepo.findById(postId).orElseThrow(()-> new ResourceNotFoundException("Post", "post id", postId));
	
	this.postRepo.delete(post);
	
	return new ApiResponse("Post Deleted",true);	
	}


	@Override
	public List<Post> getPostsByCategory(Integer categoryId) {
		Category category = this.categoryRepo.findById(categoryId).orElseThrow(()->
		new ResourceNotFoundException("Category", "category id", categoryId));	
		  
	    List<Post> list = this.postRepo.findByCategory(category);
	 
	   List<Post> list2 = list.stream().map((list1)-> this.modelMapper.map(list1, Post.class)).collect(Collectors.toList());
	
	    return list2;
	    		
	  }


	@Override
	public List<PostDto> getPostsByUser(Integer UserId) {
		return null;
	}


	@Override
	public List<Post> searchPosts(String keyword) {
		return null;
	}

	@Override
	public PostResponse getAllPost(Integer pageNumber, Integer pageSize, String sortBy, String sortDir) {
		
		Sort sort=null;
		if(sortDir.equalsIgnoreCase( "asc"))
		{
			
		}
		else 
		{
			sort=sort.by(sortBy).descending();
		}
					
	    Pageable p = PageRequest.of(pageNumber, pageSize, sort);

		 Page<Post> pagePost = this.postRepo.findAll(p);
		 
		 List<Post> allPosts = pagePost.getContent();
	 
		
		List<Post> allPosts1 = this.postRepo.findAll();
		
		List<PostDto> postDtos = allPosts1.stream().map((list1)->this.modelMapper.map(list1, PostDto.class)).collect(Collectors.toList());
		
		PostResponse postResponse = new PostResponse();
		
		postResponse.setContent(postDtos);
		postResponse.setPageNumber(pagePost.getNumber());
		postResponse.setPageSize(pagePost.getSize());
		postResponse.setTotalElement(pagePost.getTotalElements());
		postResponse.setTotalPages(pagePost.getTotalPages());
		postResponse.setLastPage(pagePost.isLast());
			
		return postResponse;
		
	}
}
	    